{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aleja\\\\poketest\\\\src\\\\PokeData.js\";\nimport React from 'react';\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport './App.css';\nimport { useLoaderData, useParams } from \"react-router-dom\";\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\n\nfunction PokeData(props) {\n  const [pokemon, getPokemonData] = useState(null);\n  const {\n    pokeid\n  } = useParams();\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: \"https://pokeapi.co/api/v2/pokemon/\" + pokeid\n    }).then(response => {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve(response);\n        }, 1);\n      });\n    }).then(response => {\n      const data = response.data;\n      getPokemonData(data);\n    }).catch(error => {\n      if (error.response) {\n        console.log(error.response);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      }\n    });\n  }, []);\n\n  if (pokemon == null) {\n    return \"Sexo\";\n  }\n\n  const rows = [pokemon];\n  const columns = [{\n    field: 'id',\n    headerName: 'ID',\n    width: 70\n  }, {\n    field: 'name',\n    headerName: 'Name',\n    width: 130\n  }, {\n    field: 'height',\n    headerName: 'Height',\n    width: 130\n  }, {\n    field: 'weight',\n    headerName: 'Weight',\n    width: 90\n  }, {\n    field: 'types',\n    headerName: 'Types',\n    description: 'This column has a value getter and is not sortable.',\n    sortable: false,\n    width: 160,\n    valueGetter: params => getTypes(params.row.types)\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PokeData\",\n    style: {\n      height: '100px',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \" \", pokemon.name), /*#__PURE__*/React.createElement(DataGrid, {\n    rows: rows,\n    columns: columns,\n    pageSize: 5,\n    rowsPerPageOptions: [5],\n    checkboxSelection: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }));\n}\n\nfunction getTypes(types) {\n  let typeString = \"\";\n  console.log(types);\n\n  for (const type of types) {\n    typeString = typeString + \" \" + type.type.name;\n  }\n\n  return typeString;\n}\n\nexport default PokeData;","map":{"version":3,"sources":["C:/Users/aleja/poketest/src/PokeData.js"],"names":["React","useEffect","useState","axios","useLoaderData","useParams","DataGrid","GridColDef","GridValueGetterParams","PokeData","props","pokemon","getPokemonData","pokeid","method","url","then","response","Promise","resolve","reject","setTimeout","data","catch","error","console","log","status","headers","rows","columns","field","headerName","width","description","sortable","valueGetter","params","getTypes","row","types","height","name","typeString","type"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport './App.css';\r\nimport {useLoaderData, useParams} from \"react-router-dom\";\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n\r\n\r\nfunction PokeData(props) {\r\n\r\n    const [pokemon, getPokemonData] = useState(null);\r\n    const { pokeid } = useParams();\r\n\r\n    useEffect(() => {\r\n        axios({method: \"get\",\r\n            url: \"https://pokeapi.co/api/v2/pokemon/\"+pokeid,})\r\n            .then((response) => {\r\n                return new Promise((resolve, reject) => {\r\n                    setTimeout(() => {\r\n                        resolve(response)\r\n                    }, 1)\r\n                })\r\n            })\r\n            .then((response)=>{\r\n                const data = response.data\r\n                getPokemonData(data)\r\n            }).catch((error) => {\r\n            if(error.response) {\r\n                console.log(error.response);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers)\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    if(pokemon == null) {\r\n        return \"Sexo\";\r\n    }\r\n\r\n    const rows = [\r\n        pokemon\r\n    ];\r\n\r\n    const columns = [\r\n        { field: 'id', headerName: 'ID', width: 70 },\r\n        { field: 'name', headerName: 'Name', width: 130 },\r\n        { field: 'height', headerName: 'Height', width: 130 },\r\n        { field: 'weight', headerName: 'Weight', width: 90 },\r\n        {\r\n            field: 'types',\r\n            headerName: 'Types',\r\n            description: 'This column has a value getter and is not sortable.',\r\n            sortable: false,\r\n            width: 160,\r\n            valueGetter: (params) =>\r\n                getTypes(params.row.types),\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <div className=\"PokeData\" style={{ height: '100px', width: '100%' }}>\r\n            <p> {pokemon.name}</p>\r\n            <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                pageSize={5}\r\n                rowsPerPageOptions={[5]}\r\n                checkboxSelection\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction getTypes(types){\r\n    let typeString = \"\";\r\n    console.log(types);\r\n    for (const type of types) {\r\n        typeString = typeString +\" \"+ type.type.name;\r\n    }\r\n    return typeString;\r\n}\r\n\r\nexport default PokeData;"]},"metadata":{},"sourceType":"module"}